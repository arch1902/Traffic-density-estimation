       // Initialize and set thread joinable
    while(true){
        Mat frame2, next;
        capture >> frame2;

        // Calculating at 5 Frames per second
        frame +=1;
        if (frame%3 !=1){continue;}


        // frame2=(frame2+prev1+prev2)/3;


        if (frame2.empty())
            break;
        next = crop(frame2);
        namedWindow("Gray Video",0);
        imshow("Gray Video",next);

        Mat split_images[NUM_THREADS];
        split(next,split_images);
        row_size = split_images[0].rows;
        col_size = split_images[0].cols;
        // row_size = next.rows;
        // col_size = next.cols;
        Qdensity = 0;

        // Queue Density-------------------------------------------------------------
        int rc,i;
        pthread_attr_init(&attr);
        pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);
        for(i = 0; i < NUM_THREADS; i++ ) {
            void *pointer;
            pointer = &split_images[i];
            cout << "main() : creating thread, " << i << endl;
            rc = pthread_create(&threads[i], &attr,qdensity, pointer );
            if (rc) {
                cout << "Error:unable to create thread," << rc << endl;
                exit(-1);
            }
        }

        // free attribute and wait for the other threads
        pthread_attr_destroy(&attr);
        for( i = 0; i < NUM_THREADS; i++ ) {
            rc = pthread_join(threads[i], &status);
            if (rc) {
                cout << "Error:unable to join," << rc << endl;
                exit(-1);
            }
            cout << "Main: completed thread id :" << i ;
            cout << "  exiting with status :" << status << endl;
        }

        cout << "Main: program exiting." << endl;
        pthread_exit(NULL);


        //-----------------------------------------------------------------------------


        x_axis.push_back(time);
        y_axis_q.push_back(Qdensity);

        myfile<<frame<<","<<time<<","<<Qdensity<<endl;

        // Ploting the live curve 
        Mat x(x_axis,true);
        Mat y_q(y_axis_q,true);
        x.convertTo(x, CV_64F);
        waitKey(30);
        time += 0.2;




import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import pandas as pd
import sys
df=pd.read_csv(sys.argv[1])
ax = plt.gca()
#df.plot(kind='line',x='frame',y='dynamic density', color = 'blue' , ax=ax)
df.plot(kind='line',x='frame',y='queue density', color = 'red' , ax=ax)
plt.show()